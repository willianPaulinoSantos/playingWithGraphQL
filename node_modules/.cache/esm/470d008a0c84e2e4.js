let createServer,request,readFile,resolve,parse;_0c8‍.w("http",[["createServer",["createServer"],function(v){createServer=v}],["request",["request"],function(v){request=v}]]);_0c8‍.w("fs",[["readFile",["readFile"],function(v){readFile=v}]]);_0c8‍.w("path",[["resolve",["resolve"],function(v){resolve=v}]]);_0c8‍.w("querystring",[["parse",["parse"],function(v){parse=v}]]);




const server = createServer((request, response) => {
    switch(request.url){
        case '/status': {
            response.writeHead(200, {
                'Content-type' : 'application/json',

            });
            response.write(JSON.stringify({
                status: 'Okay'
            }));
            response.end();
            break;
        }

        case '/sign-in': {
            const path = resolve(__dirname,'./pages/sign-in.html');
            readFile(path, (error, file) => {
                if(error){
                    response.writeHead(500, 'Can\'t process HTML file' );
                    response.end();
                    return;
                }

                response.writeHead(200);
                response.write(file);
                response.end();
            })
        }

        case '/authenticate': {
            let data = "";
            request.on('data', (chunk) => {
                _0c8‍.g.console.log(parse(data));
                data += chunk;
            });
            request.on('end', () => {
                response.writeHead(200);
                response.write(file);
                response.end();
            })
            break;
        }

        default: {
            response.writeHead(404, 'Service not found');
            response.end();
        }
    }
});


const PORT = process.env.PORT ? parseInt(process.env.PORT) : 8000;
const HOSTNAME = process.env.HOSTNAME || '127.0.0.1';

server.listen(PORT, HOSTNAME, () => {
    console.log(`server is listening in http://127.0.0.1:${PORT}`);
});